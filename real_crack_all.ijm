//Subtract non-sample
input = "C:/Life/Thesis/test/";
//input="C:/Life/Thesis/cropped_pic/7000700NIN-1/";
//input="C:/Life/Thesis/cropped_pic/7000700IN-1/";
//input = "C:/Life/Thesis/input/";
output = "C:/Life/Thesis/output/";

//setBatchMode(true);
run("Set Measurements...", "  redirect=None decimal=3");
list = getFileList(input);
for (i = 0; i < 1; i++){
//for (i = 0; i < list.length; i++){
	filename = list[i];
	crack(input, output, filename, i, "1");//first iteration for name
	crack(input, output, filename, i, "15");//the next iteration would need 
	
}
setBatchMode(false);

function crack(input, output, filename, rowNum, n){
	open(input + filename);
	selectWindow(filename);run("Duplicate...", "title=background");
	selectWindow(filename);
	run("Bandpass Filter...", "filter_large=40 filter_small=3 suppress=None tolerance=5 autoscale saturate");
	//run("Subtract Background...", "rolling=50 separate disable");
	run("Subtract Background...", "rolling=50 light sliding");
	//run("Subtract Background...", "rolling=50 light separate disable");
	//run("Color Threshold...");
	// Color Thresholder 2.0.0-rc-65/1.51w
	// Autogenerated macro, single images only!
	min=newArray(3);
	max=newArray(3);
	filter=newArray(3);
	a=getTitle();
	run("HSB Stack");
	run("Convert Stack to Images");
	selectWindow("Hue");
	rename("0");
	selectWindow("Saturation");
	rename("1");
	selectWindow("Brightness");
	rename("2");
	min[0]=1;
	max[0]=100;
	filter[0]="pass";
	min[1]=0;
	max[1]=255;
	filter[1]="pass";
	min[2]=30;
	max[2]=255;
	filter[2]="pass";
	for (i=0;i<3;i++){
	selectWindow(""+i);
	setThreshold(min[i], max[i]);
	run("Convert to Mask");
	if (filter[i]=="stop")  run("Invert");
	}
	imageCalculator("AND create", "0","1");
	imageCalculator("AND create", "Result of 0","2");
	for (i=0;i<3;i++){
	selectWindow(""+i);
	close();
	}
	selectWindow("Result of 0");
	close();
	selectWindow("Result of Result of 0");
	rename(a);
	// Colour Thresholding-------------
	selectWindow(filename);
	//run("Analyze Particles...", "size=15-Infinity pixel circularity=0.00-0.90 show=Masks display clear");
	//selectWindow(filename);
	//close();
	//selectWindow("Mask of "+filename);
	
	run("Dilate");
	run("Dilate");
	run("Erode");
	run("Erode");
	if (n=="1"){
		setResult("name", rowNum, filename);
		run("Remove Outliers...", "radius=5 threshold=50 which=Dark");
		}
	else{
		run("Remove Outliers...", "radius="+n+" threshold=50 which=Dark");
		}
	
	//run("Invert");
	run("Invert LUT");
	
	selectWindow("background");//background
	runMacro("FeatureExtraction_findBackground.ijm");//run("Invert");
	run("Invert LUT");run("Invert");
	//saveAs("tiff", output + filename+"_all_crack");			
	
	imageCalculator("Subtract", filename, "background");//real crack
	run("Invert");close("background");
	//selectWindow(filename);run("Duplicate...", "title=xxx");
	
	selectWindow(filename);
	getHistogram(myvalues, mycount1, 2);//splitting the bin into 2  for 8-bit 255/'2' for 16 bit 48059/'2'
	setResult("crack_area_"+n, rowNum, mycount1[0]);
	setResult("non-crack_area_"+n, rowNum, mycount1[1]);
	totalarea= mycount1[0]+mycount1[1];
	setResult("total_area_"+n, rowNum, totalarea);
	crackratio = mycount1[0]/totalarea;
	setResult("crackratio_"+n, rowNum, crackratio);
	//saveAs("tiff", output + filename+n+"_all_crack");			
	run("Find Edges");
	getHistogram(myvalues, mycount2, 2);//splitting the bin into 2  for 8-bit 255/'2' for 16 bit 48059/'2'
	setResult("crack_edge_"+n, rowNum, mycount2[1]);
	edgeratio = mycount2[1]/totalarea;
	setResult("edge_ratio_"+n, rowNum, edgeratio);
	updateResults();//show results table
//	saveAs("tiff", output + filename+"_all_crack");			
	//run("Measure");
	close();
	//saveAs("Results", "C:/Users/benny/Desktop/Macro/Result_"+filename+".csv");
	
}
	

